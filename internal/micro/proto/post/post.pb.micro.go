// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: post.proto

package post

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PostService service

func NewPostServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PostService service

type PostService interface {
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...client.CallOption) (*CreatePostResponse, error)
	GetPost(ctx context.Context, in *GetPostRequest, opts ...client.CallOption) (*GetPostResponse, error)
	ListPosts(ctx context.Context, in *ListPostsRequest, opts ...client.CallOption) (*ListPostsResponse, error)
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...client.CallOption) (*UpdatePostResponse, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...client.CallOption) (*DeletePostResponse, error)
}

type postService struct {
	c    client.Client
	name string
}

func NewPostService(name string, c client.Client) PostService {
	return &postService{
		c:    c,
		name: name,
	}
}

func (c *postService) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...client.CallOption) (*CreatePostResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.CreatePost", in)
	out := new(CreatePostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetPost(ctx context.Context, in *GetPostRequest, opts ...client.CallOption) (*GetPostResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.GetPost", in)
	out := new(GetPostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) ListPosts(ctx context.Context, in *ListPostsRequest, opts ...client.CallOption) (*ListPostsResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.ListPosts", in)
	out := new(ListPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...client.CallOption) (*UpdatePostResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.UpdatePost", in)
	out := new(UpdatePostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...client.CallOption) (*DeletePostResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.DeletePost", in)
	out := new(DeletePostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PostService service

type PostServiceHandler interface {
	CreatePost(context.Context, *CreatePostRequest, *CreatePostResponse) error
	GetPost(context.Context, *GetPostRequest, *GetPostResponse) error
	ListPosts(context.Context, *ListPostsRequest, *ListPostsResponse) error
	UpdatePost(context.Context, *UpdatePostRequest, *UpdatePostResponse) error
	DeletePost(context.Context, *DeletePostRequest, *DeletePostResponse) error
}

func RegisterPostServiceHandler(s server.Server, hdlr PostServiceHandler, opts ...server.HandlerOption) error {
	type postService interface {
		CreatePost(ctx context.Context, in *CreatePostRequest, out *CreatePostResponse) error
		GetPost(ctx context.Context, in *GetPostRequest, out *GetPostResponse) error
		ListPosts(ctx context.Context, in *ListPostsRequest, out *ListPostsResponse) error
		UpdatePost(ctx context.Context, in *UpdatePostRequest, out *UpdatePostResponse) error
		DeletePost(ctx context.Context, in *DeletePostRequest, out *DeletePostResponse) error
	}
	type PostService struct {
		postService
	}
	h := &postServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PostService{h}, opts...))
}

type postServiceHandler struct {
	PostServiceHandler
}

func (h *postServiceHandler) CreatePost(ctx context.Context, in *CreatePostRequest, out *CreatePostResponse) error {
	return h.PostServiceHandler.CreatePost(ctx, in, out)
}

func (h *postServiceHandler) GetPost(ctx context.Context, in *GetPostRequest, out *GetPostResponse) error {
	return h.PostServiceHandler.GetPost(ctx, in, out)
}

func (h *postServiceHandler) ListPosts(ctx context.Context, in *ListPostsRequest, out *ListPostsResponse) error {
	return h.PostServiceHandler.ListPosts(ctx, in, out)
}

func (h *postServiceHandler) UpdatePost(ctx context.Context, in *UpdatePostRequest, out *UpdatePostResponse) error {
	return h.PostServiceHandler.UpdatePost(ctx, in, out)
}

func (h *postServiceHandler) DeletePost(ctx context.Context, in *DeletePostRequest, out *DeletePostResponse) error {
	return h.PostServiceHandler.DeletePost(ctx, in, out)
}
